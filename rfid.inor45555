#include <SPI.h>  // стандартная в Arduino IDE библиотека для работы с SPI шиной. Шта? https://ru.wikipedia.org/wiki/Serial_Peripheral_Interface
#include <MFRC522.h> // Хэдер с одноимённым классом для управления РЧИ-читалкой. Шта? https://github.com/miguelbalboa/rfid
#include <DHT.h>
#include <EEPROM.h>
#include <avr/interrupt.h>
// Номера пинов управления РЧИ-читалкой

#define RST_PIN 5
#define RELAY_PIN 4
#define BUZZER_PIN 6 // номер пина управления пищалкой
#define BUTTON_PIN 22 // номер входа, подключенный к кнопке
#define DHT1_PIN 23
#define DHT2_PIN 24
#define BUTTONBIRQ_PIN 3
#define WATERSENS1_PIN 25
#define WATERSENS2_PIN 26
#define PIRSENS_PIN 27
#define SS_PIN 53

const int NEW_CARD_CHECK_DELAY = 500; // задержка между проверками поднесённости карты в милисекундах
const int OPEN_CLOSE_DELAY = 3000; // задержка между открытием и закрытием
byte storedCard[4];    // Stores an ID read from EEPROM
byte readCard[4];   // Stores scanned ID read from RFID Module
bool buttonState = 0; // переменная для хранения состояния кнопки
int buttonCount =0; // Считает количество нажатий
int successRead;    // Variable integer to keep if we have Successful Read from Reader
volatile byte seconds;

enum States { // Состояния контроллера:
  wait, check, open, close
}; 
States state; // текущее состояние
bool rightCard; // Для запоминания в цикле проверки верности карты, верна ли она



MFRC522 mfrc522(SS_PIN, RST_PIN); // Экземпляр MFRC522 для управления РЧИ-ридером.
//DHT dht1; // Экземпляр для получения данных с датчика температуры влажности
//DHT dht2; // Экземпляр для получения данных с датчика температуры влажности

void setup() {
  Serial.begin(9600); // Начать общение с компом по последовательному порту
  SPI.begin();      // Инициализация SPI-шины. 
  mfrc522.PCD_Init(); // Инициализация РЧИ-читалки
  state = wait; // Работа начинается с состояния ожидания
  pinMode(BUZZER_PIN, OUTPUT); // активируем на выход пин для гудка
  pinMode(BUTTON_PIN, INPUT); //активируем пин на вход, ждем кнопку
  pinMode(RELAY_PIN, OUTPUT); //активируем ва выход, для управления приводами
  pinMode(WATERSENS1_PIN, INPUT);
  pinMode(WATERSENS2_PIN, INPUT);
  pinMode(PIRSENS_PIN, INPUT);
  dht1.setup(DHT1_PIN);
  dht2.setup(DHT2_PIN);

   // initialize Timer1
    cli();          // disable global interrupts
    TCCR1A = 0;     // set entire TCCR1A register to 0
    TCCR1B = 0;     // same for TCCR1B
 
    // set compare match register to desired timer count:
    OCR1A = 15624;
    // turn on CTC mode:
    TCCR1B |= (1 << WGM12);
    // Set CS10 and CS12 bits for 1024 prescaler:
    TCCR1B |= (1 << CS10);
    TCCR1B |= (1 << CS12);
    // enable timer compare interrupt:
    TIMSK1 |= (1 << OCIE1A);
    // enable global interrupts:
    sei();

  
  //Wipe Code if Button Pressed while setup run (powered on) it wipes EEPROM
  if (digitalRead(BUTTON_PIN) == HIGH) {  // when button pressed pin should get low, button connected to ground
    Serial.println(F("Wipe Button Pressed"));
    Serial.println(F("You have 5 seconds to Cancel"));
    Serial.println(F("This will be remove all records and cannot be undone"));
    delay(5000);                        // Give user enough time to cancel operation
    if (digitalRead(BUTTON_PIN) == HIGH) {    // If button still be pressed, wipe EEPROM
      Serial.println(F("Starting Wiping EEPROM"));
      for (int x = 0; x < EEPROM.length(); x = x + 1) {    //Loop end of EEPROM address
        if (EEPROM.read(x) == 0) {              //If EEPROM address 0
          // do nothing, already clear, go to the next address in order to save time and reduce writes to EEPROM
        }
        else {
          EEPROM.write(x, 0);       // if not write 0 to clear, it takes 3.3mS
        }
      }
      Serial.println(F("EEPROM Successfully Wiped"));
      }
    else {
      Serial.println(F("Wiping Cancelled"));
      }
  }

// Init button interrupt
attachInterrupt(digitalPinToInterrupt(BUTTONBIRQ_PIN), ButtonIrq, RISING);


// Check if card defined, if not let user add a card
 if (EEPROM.read(1) == 0) {      
    Serial.println(F("Cards Not Defined"));
    Serial.println(F("Scan A PICC to Define Cards"));
    do{
    do{ } while (!getID());                  // Program will not go further while you not get a successful read
    AddCardToEPROM(readCard);
   if (buttonCount>0) break;
     } while(1);
                        }


 //Inital greeting
  ShowReaderDetails(); 
  TotalConfCards();
  Serial.print("Calibrating");
  cli();
  delay(3000);
  sei();
  Serial.println(" done");
  Serial.println("SENSOR ACTIVE");
  Serial.println(F("Everything Ready"));
  Serial.println(F("Waiting PICCs to be scanned"));


}


void loop() {
  switch (state){
  case wait:
    Waiting();
        /* The water sensor will switch LOW when water is detected.
           Get the Arduino to illuminate the LED and activate the buzzer
           when water is detected, and switch both off when no water is present */
 if(digitalRead(WATERSENS1_PIN) == HIGH) buzz(400);
 if(digitalRead(WATERSENS2_PIN) == HIGH) buzz(500);              
 if(digitalRead(PIRSENS_PIN) == LOW) buzz(600);
    return;
  case check:
    Checking();
    return;
  case open:
    Opening();
    return;
  case close:
    Closing();
    return;
  }
}

void Waiting(){
  delay(NEW_CARD_CHECK_DELAY);
  // проверяем наличие новой карты:
if (mfrc522.PICC_IsNewCardPresent()) state = check;


}

void Checking(){
  // Считываем UID одной из поднесённых карточек
  if (!mfrc522.PICC_ReadCardSerial()) {
    return;
  }
  delay(500);
  if (CheckCard(mfrc522.uid.uidByte))
   { state = open; // Открываемся, если та самая
    buzz(20);}
  else{
    Serial.println("Unknown CARD.");
    buzz(20);
    buzz(40); // buzz the buzzer
    delay(2000); // wait a bit between buzzes
    state = wait; // Ждём другую, если не
  }
return;
}

void Opening(){
  Serial.println("OPEN");
  ServoOpen();
  state = close;
}

void Closing(){
  delay(OPEN_CLOSE_DELAY);
  Serial.println("CLOSE");
  ServoClose();
  state = wait;
}


void buzz(unsigned char delayms){
  analogWrite(BUZZER_PIN, 20);      // Almost any value can be used except 0 and 255
                           // experiment to get the best tone
  delay(delayms);          // wait for a delayms ms
  analogWrite(BUZZER_PIN, 0);       // 0 turns it off
  delay(delayms);          // wait for a delayms ms   
}  

void ServoOpen()
{
digitalWrite(RELAY_PIN, HIGH);
}

void ServoClose()
{
digitalWrite(RELAY_PIN, LOW);
}


void ReadDht ()
{
//Считываем влажность

//delay(dht1.getMinimumSamplingPeriod());

//  float humidity = dht1.getHumidity();
//  float temperature = dht1.getTemperature();

  Serial.print("DHT22\tHumidity:");
  Serial.print(humidity, 1);
  Serial.print("(%)\tTemperature:");
  Serial.print(temperature, 1);
  Serial.print("(C)\t\n");
/*
delay(dht2.getMinimumSamplingPeriod());
  float humidity2 = dht2.getHumidity();
  float temperature2 = dht2.getTemperature();
  Serial.print("DHT11\tHumidity:");
  Serial.print(humidity2, 1);
  Serial.print("(%)\tTemperature:");
  Serial.print(temperature2, 1);
  Serial.print("(C)\t\n");
*/
  
}


void ButtonIrq()
{
  buzz(100);
  // считываем значения с входа кнопки
  buttonState = digitalRead(BUTTON_PIN);
  // проверяем нажата ли кнопка
  // если нажата, то buttonState будет HIGH:
  if (buttonState == HIGH) {
  //  Serial.println("Button pressed.");
    buttonCount++;
//    Serial.print(buttonCount, 1);
//    Serial.print("\n");
  }
}


int getID() {
  // Getting ready for Reading PICCs
  if ( ! mfrc522.PICC_IsNewCardPresent()) { //If a new PICC placed to RFID reader continue
    return 0;
  }
  if ( ! mfrc522.PICC_ReadCardSerial()) {   //Since a PICC placed get Serial and continue
    return 0;
  }
  // There are Mifare PICCs which have 4 byte or 7 byte UID care if you use 7 byte PICC
  // I think we should assume every PICC as they have 4 byte UID
  // Until we support 7 byte PICCs
  Serial.println(F("Scanned PICC's UID:"));
  for (int i = 0; i < 4; i++) {  //
    readCard[i] = mfrc522.uid.uidByte[i];
    Serial.print(readCard[i], HEX);
  }
  Serial.println("");
  mfrc522.PICC_HaltA(); // Stop reading
  return 1;
}

void ShowReaderDetails() {
  // Get the MFRC522 software version
  byte v = mfrc522.PCD_ReadRegister(mfrc522.VersionReg);
  Serial.print(F("MFRC522 Software Version: 0x"));
  Serial.print(v, HEX);
  if (v == 0x91)
    Serial.print(F(" = v1.0"));
  else if (v == 0x92)
    Serial.print(F(" = v2.0"));
  else
    Serial.print(F(" (unknown)"));
  Serial.println("");
  // When 0x00 or 0xFF is returned, communication probably failed
  if ((v == 0x00) || (v == 0xFF)) {
    Serial.println(F("WARNING: Communication failure, is the MFRC522 properly connected?"));
    while(true);  // do not go further
  }
}


byte TotalConfCards()
{
  byte configeredCardNum=EEPROM.read(1);
  Serial.print("Total configured cards:");
  Serial.print(configeredCardNum);
  Serial.print("\n"); 
  return configeredCardNum;
}

bool CheckCard(byte card[4])
{
  byte configeredCardNum=EEPROM.read(1);
  byte storedCard[4];
  int c=0;
  do {
  int startAddr=2+c*4;
  for ( int i = 0; i < 4; i++ ) {
    storedCard[i] = EEPROM.read(startAddr+i);
   /* Serial.print(startAddr+i);
    Serial.print("\t");
    Serial.print(i);
    Serial.print("\t");
    Serial.print(storedCard[i], HEX);
    Serial.print("\t");
    Serial.print(card[i], HEX);
    Serial.print("\n");*/
  if (storedCard[i]!=card[i]) break;
  if (i==3) return true;
  }
  c++;
  } while (c<=configeredCardNum );
  return false;
}


void AddCardToEPROM (byte card[4])
{
 byte configeredCardNum=EEPROM.read(1);
 if (CheckCard(card)) Serial.print("Duplicated card\n");
 else
 {
  for ( int j = 0; j < 4; j++ ) {        // Loop 4 times
      int readAddr=2+4*configeredCardNum+ j;
      EEPROM.write( readAddr, readCard[j] );  
    //Serial.print(readAddr);
    }
    Serial.print("\n");
    EEPROM.write(1, configeredCardNum+1);                  
    Serial.print(configeredCardNum+1);
    Serial.println(F("\tCard Defined"));
    Serial.print("\n");
 }

}

ISR(TIMER1_COMPA_vect)
{
     seconds++;
    if (seconds == 10)
    {
        seconds = 0;
        ReadDht ();
    }
    
}


